# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left n
set $down e
set $up i
set $right o
# Your preferred terminal emulator
# Recommends: foot
set $term foot
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# Recommends: rofi-wayland
set $rofi_cmd rofi \
        -terminal '$term'
# Shows a combined list of the applications with desktop files and
# executables from PATH.
# TODO: add window with the next release of rofi-wayland
# set $menu $rofi_cmd -show combi -combi-modes drun#run -modes combi
# set $menu $rofi_cmd -show combi -combi-modes "window,drun,run,ssh" -modes combi

# rofi is fucking broken
# set $menu wmenu-run
set $menu fuzzel

# Define Monitor outputs
set $do1 "HDMI-A-1"
set $do2 "DVI-D-1"

# Define Workspace Names
set $ws1 "1:Browser1"
set $ws2 "2:Email"
set $ws3 "3:Browser2"
set $ws4 "4:Term1"
set $ws5 "5:Comm"
set $ws6 "6:Term2"
set $ws7 "7:Notes"
set $ws8 "8:Random2"
set $ws9 "9:Bitwarden"
# Workspace 10 is implicitly "10" unless defined

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
# Requires: desktop-backgrounds-compat, swaybg
output * bg /usr/share/backgrounds/default.jxl fill

output $do1 resolution 1920x1080 position 0,0
output $do2 resolution 1600x900 position 1920,180
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term -e tmux

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu

    # Lock screen
    bindsym $mod+l exec swaylock

    # screenshot to clipboard
    bindsym $mod+p exec grim -g "$(slurp)" - | wl-copy
    # screenshot to file
    bindsym $mod+Shift+p exec grim -g "$(slurp)" $(xdg-user-dir PICTURES)/grim/$(date +'%FT%T.png')

    # Toggle workspaces
    bindsym $mod+t workspace back_and_forth

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    focus_follows_mouse no

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+k exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace using number keys
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Switch to workspace using named variables (redundant if numbers match, but explicit)
    # bindsym $mod+1 workspace $ws1 # Can uncomment if you prefer referring by variable
    # bindsym $mod+2 workspace $ws2
    # ... etc ...

    # Move focused container to workspace using number keys
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Move focused container to workspace using named variables
    # bindsym $mod+Shift+1 move container to workspace $ws1 # Can uncomment if you prefer
    # bindsym $mod+Shift+2 move container to workspace $ws2
    # ... etc ...

    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default. Using named variables ($wsN) is good practice.
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+x layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show

#
# Cursors / Mouse
#
    # Hide cursor after x millisecond
    #seat seat0 hide_cursor 3000
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

### Appearance / Layout
default_border none
# Apply tabbed layout to new workspaces
workspace_layout tabbed

### Workspace Assignments to Outputs
# Assign specific workspaces to specific monitor outputs
workspace $ws1 output $do1
workspace $ws2 output $do2
workspace $ws3 output $do2
workspace $ws4 output $do1
workspace $ws5 output $do1
workspace $ws6 output $do2
workspace $ws7 output $do1
workspace $ws8 output $do1
workspace $ws9 output $do2

### Application Assignments to Workspaces
# Assign applications to specific workspaces using criteria like app_id or class
# Verify these app_ids using: swaymsg -t get_tree | jq '.. | select(.focused?) | .app_id'
assign [app_id="zen"] $ws1
assign [app_id="thunderbird"] $ws2
assign [app_id="firefox"] $ws3
# Check the actual app_id for Chrome; it might be 'google-chrome' or similar
assign [app_id="Google-chrome-unstable"] $ws3
assign [class="Zulip"] $ws5
assign [app_id="com.slack.Slack"] $ws5
# assign [app_id="xpad"] $ws7 # xpad might not have a stable app_id or class, test this
# Verify app_id for Bitwarden (might be lowercase 'bitwarden', 'Bitwarden', or specific if Flatpak/Snap)
assign [class="Bitwarden"] $ws9

# Assign specific terminal instances using unique app_ids (set via --app-id flag)
assign [app_id="foot-main"] $ws4
assign [app_id="foot-info"] $ws6


### Startup Applications
# Use simple `exec` and let the `assign` rules above handle placement.

# Start background services/daemons first
# exec echo -n > "$HOME/.config/sway/config.d/90-bar.conf" # Example from original config if needed
exec waybar
exec mako
# exec swayidle ... # Uncomment and configure if you set up swayidle

# Start your tmux session creation script (if it pre-creates sessions needed below)
# Ensure this script completes before terminals try to attach if they depend on it.
exec sh /opt/script/tmux/create-session.work.sh

# Start main applications
exec flatpak run app.zen_browser.zen
exec thunderbird
exec firefox
exec flatpak run org.zulip.Zulip
exec flatpak run com.slack.Slack
# exec xpad # Uncomment if you use and want xpad started
exec bitwarden

# Start Terminals with unique app_ids and robust tmux attach/create commands
# The `--app-id` flag sets the ID for the 'assign' rule above.
# `tmux new-session -A -s <session_name>` attaches if exists, creates if not.
# exec $term --app-id=foot-main tmux a -t main:term
# exec $term --app-id=foot-info tmux a -t info:calcurse


### Includes
# Include configs from standard locations. The last specified location takes precedence.
# Check your system's preferred method (simple include or layered-include)

# Option 1: Simple include (Common)
include /etc/sway/config.d/*

# Option 2: Layered include (Used by some distros like Fedora)
# Ensure the path to the helper script is correct for your system.
# include '$(/usr/libexec/sway/layered-include "/usr/share/sway/config.d/*.conf" "/etc/sway/config.d/*.conf" "${XDG_CONFIG_HOME:-$HOME/.config}/sway/config.d/*.conf")'

# --- End of Configuration ---
